{"version":3,"file":"react-native-media-controls.cjs.production.min.js","sources":["../src/constants/playerStates.ts","../src/MediaControls.style.ts","../src/Images.tsx","../src/Controls.tsx","../src/utils.ts","../src/Slider.tsx","../src/MediaControls.tsx","../src/Toolbar.tsx"],"sourcesContent":["enum PLAYER_STATES {\n  PLAYING = 0,\n  PAUSED = 1,\n  ENDED = 2,\n}\n\nexport { PLAYER_STATES };\n","import { StyleSheet } from \"react-native\";\n\nconst containerBackgroundColor = \"rgba(45, 59, 62, 0.0)\";\nconst playButtonBorderColor = \"rgba(255,255,255,0.0)\";\nconst white = \"#fff\";\n\nexport default StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    backgroundColor: containerBackgroundColor,\n    bottom: 0,\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    left: 0,\n    paddingHorizontal: 20,\n    paddingVertical: 13,\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n  },\n  controlsRow: {\n    alignItems: \"center\",\n    alignSelf: \"stretch\",\n    flex: 1,\n    justifyContent: \"center\",\n  },\n  fullScreenContainer: {\n    alignItems: \"center\",\n    alignSelf: \"stretch\",\n    justifyContent: \"center\",\n    paddingLeft: 20,\n  },\n  playButton: {\n    alignItems: \"center\",\n    borderColor: playButtonBorderColor,\n    borderRadius: 50,\n    borderWidth: 0,\n    height: 50,\n    justifyContent: \"center\",\n    width: 50,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  playIcon: {\n    height: 22,\n    resizeMode: \"contain\",\n    width: 22,\n  },\n  progressColumnContainer: {\n    flex: 1,\n  },\n  progressContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    marginBottom: -25,\n  },\n  progressSlider: {\n    alignSelf: \"stretch\",\n  },\n  replayIcon: {\n    height: 20,\n    resizeMode: \"stretch\",\n    width: 25,\n  },\n  thumb: {\n    backgroundColor: white,\n    borderRadius: 50,\n    borderWidth: 3,\n    height: 20,\n    width: 20,\n  },\n  timeRow: {\n    alignSelf: \"stretch\",\n  },\n  timerLabel: {\n    color: white,\n    fontSize: 12,\n    fontFamily: \"Muli\",\n  },\n  timerLabelsContainer: {\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    marginBottom: -7,\n  },\n  toolbar: {\n    flexDirection: \"row\",\n    flex: 1,\n    justifyContent: \"flex-end\",\n  },\n  toolbarRow: {\n    alignItems: \"flex-start\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-start\",\n  },\n  track: {\n    borderRadius: 1,\n    height: 2,\n  },\n});\n","const images = {\n  playIcon: require(\"./assets/ic_play.png\"),\n  pauseIcon: require(\"./assets/ic_pause.png\"),\n  replayIcon: require(\"./assets/ic_replay.png\"),\n};\n\nexport default images;\n","import React from \"react\";\nimport { TouchableOpacity, View, ActivityIndicator, Image } from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { Props } from \"./MediaControls\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\n\nimport images from \"./Images\";\n\ntype ControlsProps = Pick<\n  Props,\n  \"isLoading\" | \"mainColor\" | \"playerState\" | \"onReplay\"\n> & {\n  onPause: () => void;\n};\n\nconst Controls = (props: ControlsProps) => {\n  const { isLoading, mainColor, playerState, onReplay, onPause } = props;\n  const pressAction = playerState === PLAYER_STATES.ENDED ? onReplay : onPause;\n\n  const replayIcon = images.replayIcon;\n  const icon = () => {\n    switch (playerState) {\n      case PLAYER_STATES.PAUSED:\n        return images.playIcon;\n      case PLAYER_STATES.PLAYING:\n        return images.pauseIcon;\n      case PLAYER_STATES.ENDED:\n        return replayIcon;\n      default:\n        return images.playIcon;\n    }\n  };\n\n  const content = isLoading ? (\n    <ActivityIndicator size=\"large\" color=\"#FFF\" />\n  ) : (\n    <TouchableOpacity\n      style={[styles.playButton, { backgroundColor: mainColor }]}\n      onPress={pressAction}\n      activeOpacity={0}\n    >\n      <Image source={icon()} style={styles.playIcon} />\n    </TouchableOpacity>\n  );\n\n  return <View style={[styles.controlsRow]}>{content}</View>;\n};\n\nexport { Controls };\n","import { PLAYER_STATES } from \"./constants/playerStates\";\n\nexport const humanizeVideoDuration = (seconds: number) => {\n  const [begin, end] = seconds >= 3600 ? [11, 8] : [14, 5];\n  const date = new Date(0);\n\n  date.setSeconds(seconds);\n  return date.toISOString().substr(begin, end);\n};\n\nexport const noop = () => {};\n\nexport const getPlayerStateIcon = (playerState: PLAYER_STATES) => {\n  switch (playerState) {\n    case PLAYER_STATES.PAUSED:\n      return require(\"./assets/ic_play.png\");\n    case PLAYER_STATES.PLAYING:\n      return require(\"./assets/ic_pause.png\");\n    case PLAYER_STATES.ENDED:\n      return require(\"./assets/ic_replay.png\");\n    default:\n      return null;\n  }\n};\n","import React from \"react\";\nimport { TouchableOpacity, View, Text, Image, ViewStyle } from \"react-native\";\nimport RNSlider from \"react-native-slider\";\nimport styles from \"./MediaControls.style\";\nimport { humanizeVideoDuration } from \"./utils\";\nimport { Props as MediaControlsProps } from \"./MediaControls\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\n\nexport type CustomSliderStyle = {\n  containerStyle: ViewStyle;\n  trackStyle: ViewStyle;\n  thumbStyle: ViewStyle;\n};\n\ntype Props = Pick<\n  MediaControlsProps,\n  | \"progress\"\n  | \"duration\"\n  | \"mainColor\"\n  | \"onFullScreen\"\n  | \"playerState\"\n  | \"onSeek\"\n  | \"onSeeking\"\n> & {\n  onPause: () => void;\n  customSliderStyle?: CustomSliderStyle;\n};\n\nconst fullScreenImage = require(\"./assets/ic_fullscreen.png\");\n\nconst Slider = (props: Props) => {\n  const {\n    customSliderStyle,\n    duration,\n    mainColor,\n    onFullScreen,\n    onPause,\n    progress,\n  } = props;\n\n  const containerStyle = customSliderStyle?.containerStyle || {};\n  const customTrackStyle = customSliderStyle?.trackStyle || {};\n  const customThumbStyle = customSliderStyle?.thumbStyle || {};\n\n  const dragging = (value: number) => {\n    const { onSeeking, playerState } = props;\n    onSeeking(value);\n\n    if (playerState === PLAYER_STATES.PAUSED) {\n      return;\n    }\n\n    onPause();\n  };\n\n  const seekVideo = (value: number) => {\n    props.onSeek(value);\n    onPause();\n  };\n\n  return (\n    <View\n      style={[styles.controlsRow, styles.progressContainer, containerStyle]}\n    >\n      <View style={styles.progressColumnContainer}>\n        <View style={[styles.timerLabelsContainer]}>\n          <Text style={styles.timerLabel}>\n            {humanizeVideoDuration(progress)}\n          </Text>\n          <Text style={styles.timerLabel}>\n            {humanizeVideoDuration(duration)}\n          </Text>\n        </View>\n        <RNSlider\n          style={[styles.progressSlider]}\n          onValueChange={dragging}\n          onSlidingComplete={seekVideo}\n          maximumValue={Math.floor(duration)}\n          value={Math.floor(progress)}\n          trackStyle={[styles.track, customTrackStyle]}\n          thumbStyle={[\n            styles.thumb,\n            customThumbStyle,\n            { borderColor: mainColor },\n          ]}\n          minimumTrackTintColor={mainColor}\n        />\n      </View>\n      {Boolean(onFullScreen) && (\n        <TouchableOpacity\n          style={styles.fullScreenContainer}\n          onPress={onFullScreen}\n        >\n          <Image source={fullScreenImage} />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nexport { Slider };\n","import React, { useState } from \"react\";\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  GestureResponderEvent,\n  ViewStyle,\n} from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\nimport { Controls } from \"./Controls\";\nimport { Slider, CustomSliderStyle } from \"./Slider\";\nimport { Toolbar } from \"./Toolbar\";\n\nexport type Props = {\n  children: React.ReactNode;\n  containerStyle: ViewStyle;\n  duration: number;\n  fadeOutDelay?: number;\n  isFullScreen: boolean;\n  isLoading: boolean;\n  mainColor: string;\n  onFullScreen?: (event: GestureResponderEvent) => void;\n  onPaused: (playerState: PLAYER_STATES) => void;\n  onReplay: () => void;\n  onSeek: (value: number) => void;\n  onSeeking: (value: number) => void;\n  playerState: PLAYER_STATES;\n  progress: number;\n  showOnStart?: boolean;\n  sliderStyle: CustomSliderStyle;\n  toolbarStyle: ViewStyle;\n};\n\nconst MediaControls = (props: Props) => {\n  const {\n    children,\n    containerStyle: customContainerStyle = {},\n    duration,\n    fadeOutDelay = 5000,\n    isLoading = false,\n    mainColor = \"rgba(12, 83, 175, 0.9)\",\n    onFullScreen,\n    onReplay: onReplayCallback,\n    onSeek,\n    onSeeking,\n    playerState,\n    progress,\n    showOnStart = true,\n    sliderStyle, // defaults are applied in Slider.tsx\n    toolbarStyle: customToolbarStyle = {},\n  } = props;\n  const { initialOpacity, initialIsVisible } = (() => {\n    if (showOnStart) {\n      return {\n        initialOpacity: 1,\n        initialIsVisible: true,\n      };\n    }\n\n    return {\n      initialOpacity: 0,\n      initialIsVisible: false,\n    };\n  })();\n\n  const [opacity] = useState(new Animated.Value(initialOpacity));\n  const [isVisible, setIsVisible] = useState(initialIsVisible);\n\n  const fadeOutControls = (delay = 0) => {\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: 300,\n      delay,\n      useNativeDriver: false,\n    }).start(result => {\n      /* I noticed that the callback is called twice, when it is invoked and when it completely finished\n      This prevents some flickering */\n      if (result.finished) {\n        setIsVisible(false);\n      }\n    });\n  };\n\n  const fadeInControls = (loop = true) => {\n    setIsVisible(true);\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: 300,\n      delay: 0,\n      useNativeDriver: false,\n    }).start(() => {\n      if (loop) {\n        fadeOutControls(fadeOutDelay);\n      }\n    });\n  };\n\n  const onReplay = () => {\n    fadeOutControls(fadeOutDelay);\n    onReplayCallback();\n  };\n\n  const cancelAnimation = () => opacity.stopAnimation(() => setIsVisible(true));\n\n  const onPause = () => {\n    const { playerState, onPaused } = props;\n    const { PLAYING, PAUSED, ENDED } = PLAYER_STATES;\n    switch (playerState) {\n      case PLAYING: {\n        cancelAnimation();\n        break;\n      }\n      case PAUSED: {\n        fadeOutControls(fadeOutDelay);\n        break;\n      }\n      case ENDED:\n        break;\n    }\n\n    const newPlayerState = playerState === PLAYING ? PAUSED : PLAYING;\n    return onPaused(newPlayerState);\n  };\n\n  const toggleControls = () => {\n    // value is the last value of the animation when stop animation was called.\n    // As this is an opacity effect, I (Charlie) used the value (0 or 1) as a boolean\n    opacity.stopAnimation((value: number) => {\n      setIsVisible(!!value);\n      return value ? fadeOutControls() : fadeInControls();\n    });\n  };\n\n  return (\n    <TouchableWithoutFeedback onPress={toggleControls}>\n      <Animated.View style={[styles.container, { opacity }]}>\n        {isVisible && (\n          <View style={[styles.container, customContainerStyle]}>\n            <View\n              style={[\n                styles.controlsRow,\n                styles.toolbarRow,\n                customToolbarStyle,\n              ]}\n            >\n              {children}\n            </View>\n            <Controls\n              onPause={onPause}\n              onReplay={onReplay}\n              isLoading={isLoading}\n              mainColor={\"#3366FF\"}\n              playerState={playerState}\n            />\n            <Slider\n              progress={progress}\n              duration={duration}\n              mainColor={mainColor}\n              onFullScreen={onFullScreen}\n              playerState={playerState}\n              onSeek={onSeek}\n              onSeeking={onSeeking}\n              onPause={onPause}\n              customSliderStyle={sliderStyle}\n            />\n          </View>\n        )}\n      </Animated.View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nMediaControls.Toolbar = Toolbar;\n\nexport default MediaControls;\n","import React from \"react\";\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst Toolbar = ({ children }: Props) => <>{children}</>;\n\nexport { Toolbar };\n"],"names":["PLAYER_STATES","StyleSheet","create","container","alignItems","backgroundColor","bottom","flex","flexDirection","justifyContent","left","paddingHorizontal","paddingVertical","position","right","top","controlsRow","alignSelf","fullScreenContainer","paddingLeft","playButton","borderColor","borderRadius","borderWidth","height","width","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","playIcon","resizeMode","progressColumnContainer","progressContainer","marginBottom","progressSlider","replayIcon","thumb","timeRow","timerLabel","color","fontSize","fontFamily","timerLabelsContainer","toolbar","toolbarRow","track","images","require","pauseIcon","Controls","props","mainColor","playerState","pressAction","ENDED","onReplay","onPause","content","isLoading","React","ActivityIndicator","size","TouchableOpacity","style","styles","onPress","activeOpacity","Image","source","PAUSED","PLAYING","icon","View","humanizeVideoDuration","seconds","begin","end","date","Date","setSeconds","toISOString","substr","fullScreenImage","Slider","customSliderStyle","duration","onFullScreen","progress","customTrackStyle","trackStyle","customThumbStyle","thumbStyle","containerStyle","Text","RNSlider","onValueChange","value","onSeeking","onSlidingComplete","onSeek","maximumValue","Math","floor","minimumTrackTintColor","Boolean","MediaControls","children","customContainerStyle","fadeOutDelay","onReplayCallback","showOnStart","sliderStyle","toolbarStyle","customToolbarStyle","initialOpacity","initialIsVisible","opacity","useState","Animated","Value","setIsVisible","fadeOutControls","delay","timing","toValue","useNativeDriver","start","result","finished","onPaused","stopAnimation","TouchableWithoutFeedback","loop","Toolbar"],"mappings":"8IAAKA,4FCMUC,aAAWC,OAAO,CAC/BC,UAAW,CACTC,WAAY,SACZC,gBAP6B,wBAQ7BC,OAAQ,EACRC,KAAM,EACNC,cAAe,SACfC,eAAgB,gBAChBC,KAAM,EACNC,kBAAmB,GACnBC,gBAAiB,GACjBC,SAAU,WACVC,MAAO,EACPC,IAAK,GAEPC,YAAa,CACXZ,WAAY,SACZa,UAAW,UACXV,KAAM,EACNE,eAAgB,UAElBS,oBAAqB,CACnBd,WAAY,SACZa,UAAW,UACXR,eAAgB,SAChBU,YAAa,IAEfC,WAAY,CACVhB,WAAY,SACZiB,YAhC0B,wBAiC1BC,aAAc,GACdC,YAAa,EACbC,OAAQ,GACRf,eAAgB,SAChBgB,MAAO,GACPC,YAAa,OACbC,aAAc,CACZF,MAAO,EACPD,OAAQ,GAEVI,cAAe,IACfC,aAAc,KACdC,UAAW,GAEbC,SAAU,CACRP,OAAQ,GACRQ,WAAY,UACZP,MAAO,IAETQ,wBAAyB,CACvB1B,KAAM,GAER2B,kBAAmB,CACjB1B,cAAe,MACfC,eAAgB,WAChB0B,cAAe,IAEjBC,eAAgB,CACdnB,UAAW,WAEboB,WAAY,CACVb,OAAQ,GACRQ,WAAY,UACZP,MAAO,IAETa,MAAO,CACLjC,gBApEU,OAqEViB,aAAc,GACdC,YAAa,EACbC,OAAQ,GACRC,MAAO,IAETc,QAAS,CACPtB,UAAW,WAEbuB,WAAY,CACVC,MA9EU,OA+EVC,SAAU,GACVC,WAAY,QAEdC,qBAAsB,CACpB3B,UAAW,UACXT,cAAe,MACfC,eAAgB,gBAChB0B,cAAe,GAEjBU,QAAS,CACPrC,cAAe,MACfD,KAAM,EACNE,eAAgB,YAElBqC,WAAY,CACV1C,WAAY,aACZI,cAAe,MACfC,eAAgB,cAElBsC,MAAO,CACLzB,aAAc,EACdE,OAAQ,MDxGPxB,EAAAA,wBAAAA,kDAEHA,uBACAA,qBEHF,IAAMgD,EAAS,CACbjB,SAAUkB,QAAQ,wBAClBC,UAAWD,QAAQ,yBACnBZ,WAAYY,QAAQ,2BCYhBE,EAAW,SAACC,OACGC,EAA8CD,EAA9CC,UAAWC,EAAmCF,EAAnCE,YACxBC,EAAcD,IAAgBtD,sBAAcwD,MADeJ,EAAtBK,SAAsBL,EAAZM,QAG/CrB,EAAaW,EAAOX,WAcpBsB,EAjB2DP,EAAzDQ,UAkBNC,gBAACC,qBAAkBC,KAAK,QAAQtB,MAAM,SAEtCoB,gBAACG,oBACCC,MAAO,CAACC,EAAO9C,WAAY,CAAEf,gBAAiBgD,IAC9Cc,QAASZ,EACTa,cAAe,GAEfP,gBAACQ,SAAMC,OArBE,kBACHhB,QACDtD,sBAAcuE,cACVvB,EAAOjB,cACX/B,sBAAcwE,eACVxB,EAAOE,eACXlD,sBAAcwD,aACVnB,iBAEAW,EAAOjB,UAYD0C,GAAQR,MAAOC,EAAOnC,mBAIlC8B,gBAACa,QAAKT,MAAO,CAACC,EAAOlD,cAAe2C,IC3ChCgB,EAAwB,SAACC,SACfA,GAAW,KAAO,CAAC,GAAI,GAAK,CAAC,GAAI,GAA/CC,OAAOC,OACRC,EAAO,IAAIC,KAAK,UAEtBD,EAAKE,WAAWL,GACTG,EAAKG,cAAcC,OAAON,EAAOC,ICqBpCM,EAAkBnC,QAAQ,8BAE1BoC,EAAS,SAACjC,OAEZkC,EAMElC,EANFkC,kBACAC,EAKEnC,EALFmC,SACAlC,EAIED,EAJFC,UACAmC,EAGEpC,EAHFoC,aACA9B,EAEEN,EAFFM,QACA+B,EACErC,EADFqC,SAIIC,GAAmBJ,MAAAA,SAAAA,EAAmBK,aAAc,GACpDC,GAAmBN,MAAAA,SAAAA,EAAmBO,aAAc,UAmBxDhC,gBAACa,QACCT,MAAO,CAACC,EAAOlD,YAAakD,EAAOhC,mBAtBhBoD,MAAAA,SAAAA,EAAmBQ,iBAAkB,KAwBxDjC,gBAACa,QAAKT,MAAOC,EAAOjC,yBAClB4B,gBAACa,QAAKT,MAAO,CAACC,EAAOtB,uBACnBiB,gBAACkC,QAAK9B,MAAOC,EAAO1B,YACjBmC,EAAsBc,IAEzB5B,gBAACkC,QAAK9B,MAAOC,EAAO1B,YACjBmC,EAAsBY,KAG3B1B,gBAACmC,GACC/B,MAAO,CAACC,EAAO9B,gBACf6D,cA/BS,SAACC,OACG5C,EAAgBF,EAAhBE,aACnB6C,EADmC/C,EAA3B+C,WACED,GAEN5C,IAAgBtD,sBAAcuE,QAIlCb,KAwBM0C,kBArBU,SAACF,GACjB9C,EAAMiD,OAAOH,GACbxC,KAoBM4C,aAAcC,KAAKC,MAAMjB,GACzBW,MAAOK,KAAKC,MAAMf,GAClBE,WAAY,CAACzB,EAAOnB,MAAO2C,GAC3BG,WAAY,CACV3B,EAAO5B,MACPsD,EACA,CAAEvE,YAAagC,IAEjBoD,sBAAuBpD,KAG1BqD,QAAQlB,IACP3B,gBAACG,oBACCC,MAAOC,EAAOhD,oBACdiD,QAASqB,GAET3B,gBAACQ,SAAMC,OAAQc,OC3DnBuB,EAAgB,SAACvD,OAEnBwD,EAeExD,EAfFwD,WAeExD,EAdF0C,eAAgBe,aAAuB,KACvCtB,EAaEnC,EAbFmC,WAaEnC,EAZF0D,aAAAA,aAAe,QAYb1D,EAXFQ,UAAAA,kBAWER,EAVFC,UAAAA,aAAY,2BACZmC,EASEpC,EATFoC,aACUuB,EAQR3D,EARFK,SACA4C,EAOEjD,EAPFiD,OACAF,EAME/C,EANF+C,UACA7C,EAKEF,EALFE,YACAmC,EAIErC,EAJFqC,WAIErC,EAHF4D,YACAC,EAEE7D,EAFF6D,cAEE7D,EADF8D,aAAcC,aAAqB,qBAI1B,CACLC,eAAgB,EAChBC,kBAAkB,GAIf,CACLD,eAAgB,EAChBC,kBAAkB,GAVEA,IAAAA,iBAcjBC,EAAWC,WAAS,IAAIC,WAASC,QAdhCL,sBAe0BG,WAASF,GAAzBK,OAEZC,EAAkB,SAACC,YAAAA,IAAAA,EAAQ,GAC/BJ,WAASK,OAAOP,EAAS,CACvBQ,QAAS,EACTvC,SAAU,IACVqC,MAAAA,EACAG,iBAAiB,IAChBC,OAAM,SAAAC,GAGHA,EAAOC,UACTR,GAAa,OA0BbhE,EAAU,eACNJ,EAA0BF,EAA1BE,YAAa6E,EAAa/E,EAAb+E,SACb3D,EAA2BxE,sBAA3BwE,QAASD,EAAkBvE,sBAAlBuE,cACTjB,QACDkB,EANqB8C,EAAQc,eAAc,kBAAMV,GAAa,iBAU9DnD,EACHoD,EAAgBb,UAQbqB,EADgB7E,IAAgBkB,EAAUD,EAASC,WAc1DX,gBAACwE,4BAAyBlE,QAVL,WAGrBmD,EAAQc,eAAc,SAAClC,UACrBwB,IAAexB,GACRA,EAAQyB,cA9CKW,IAAAA,GAAO,GAC7BZ,GAAa,QACbF,WAASK,OAAOP,EAAS,CACvBQ,QAAS,EACTvC,SAAU,IACVqC,MAAO,EACPG,iBAAiB,IAChBC,OAAM,WACHM,GACFX,EAAgBb,OATC,IAACwB,OAoDpBzE,gBAAC2D,WAAS9C,MAAKT,MAAO,CAACC,EAAO/D,UAAW,CAAEmH,QAAAA,WAEvCzD,gBAACa,QAAKT,MAAO,CAACC,EAAO/D,UAAW0G,IAC9BhD,gBAACa,QACCT,MAAO,CACLC,EAAOlD,YACPkD,EAAOpB,WACPqE,IAGDP,GAEH/C,gBAACV,GACCO,QAASA,EACTD,SApDK,WACfkE,EAAgBb,GAChBC,KAmDUnD,UAAWA,EACXP,UAAW,UACXC,YAAaA,IAEfO,gBAACwB,GACCI,SAAUA,EACVF,SAAUA,EACVlC,UAAWA,EACXmC,aAAcA,EACdlC,YAAaA,EACb+C,OAAQA,EACRF,UAAWA,EACXzC,QAASA,EACT4B,kBAAmB2B,QASjCN,EAAc4B,QCvKE,mBAAyB1E,kCAAtB+C"}